apiVersion: apps/v1
kind: StatefulSet
#元数据
metadata:
  #pod的名称
  name: zd
  #namespace
  namespace: zd
  #标签列表(Label其实就一对 key/value),Labels的值对系统本身并没有什么含义，
  #只是对用户才有意义。同一个资源对象的labels属性的key必须唯一.
  #label可以附加到各种资源对象上，如Node,Pod,Service,RC等。一个资源拥有多个标签，可以实现不同维度的管理
  labels:
    #label 必须以字母或数字开头，可以使用字母、数字、连字符、点和下划线，最长63个字符
    #kubectl get pods --show-labels(查看pod显示labels)
    - environment: dev
    - release: stable
    - app: zd
  #自定义注解列表(客户端程序可以获取这些元数据)
  annotations:
    - imageregistry: "https://hub.docker.com/"
spec:
  selector:
    matchLabels:
      app: zd
  serviceName: zd
  volumeClaimTemplates:
    - metadata:
        name: zd-pv
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 30Gi
        storageClassName: manual
      
  template:
    spec:
      #挂载数据卷
      volumes:
        - name: zd
          emptyDir: { }
        - name: zd-1
          #投射数据卷(Secret/ConfigMap/Downward API/ServiceAccountToken)
          projected:
            sources:
              #Secret:加密数据，存放到 Etcd 中
              #ConfigMap: 应用配置
              #Downward API:让 Pod 里的容器能够直接获取到这个 Pod API 对象本身的信息。
              #ServiceAccountToken:授权信息
              - secret:
                  name: zd-secret
      securityContext:
        runAsUser: 1001
      #镜像列表
      containers:
        - name: tomcat
          #镜像名称
          image: redis:latest
          #镜像拉取策略 （Always：每次拉取最新镜像，在:latest时默认Always）
          #IfNotPresent: 已经存在的情况下直接略过拉取镜像的操作
          #Never: 只使用本地镜像，从不拉取
          imagePullPolicy: Always
          #安全上下文（Security Context）定义 Pod 或 Container 的特权与访问控制设置
          #自主访问控制:基于 用户 ID（UID）和组 ID（GID）
          securityContext:
            runAsNonRoot: false
            runAsUser: 1001
          #使用数据卷
          volumeMounts:
            #容器内安装数据卷的位置
            - mountPath: /home
              #数据卷的名称
              name: zd-volume
          #容器要使用的块设备列表
          volumeDevices:
            #是设备将映射到的容器内的路径
            - devicePath: /app
              name: zd-volume
          #容器中设置的环境变量
          env:
            - name: name
              value: value
          #ConfigMap定义的配置可以通过envFrom传入给容器
          envFrom:
            - configMapRef:
                name: zd-mysql-nacos
              #秘钥配置
              secretRef:
                name: zd-secret
          #探针
          #livenessProbe:指示容器是否正在运行。如果存活态探测失败，则 kubelet 会杀死容器， 并且容器将根据其重启策略决定未来
          #readinessProbe:指示容器是否准备好为请求提供服务。
          #startupProbe: 指示容器中的应用是否已经启动。
          ports:
            - containerPort: 80
              name: tcp
      #容器的重启策略
      #Always: 如果容器停止，总是重新启动容器。
      #OnFailure: 容器终止运行且退出码不为0时重启
      #Never : 不论状态为何， kubelet 都不重启该容器
      restartPolicy: Always



#mysql配置
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: zd
  name: zd-mysql-nacos
data:
  mysql.host: "www.uetty.com"
  mysql.port: "8806"
  mysql.name: "nacos"
  mysql.user: "uetty"
  mysql.password: "35#B!!)"
  
---
apiVersion: v1
kind: Secret
metadata:
  namespace: zd
  name: zd-secret

---
apiVersion: v1
kind: Service
metadata:
  namespace: zd
  name: zd-service
spec:
  selector:
    app: zd
  #ClusterIP(默认): 分配一个集群内部 IP 地址，用于对Endpoint进行负载平衡。
  #NodePort: 建立在 ClusterIP 之上，并在每个节点上分配一个端口，该端口路由到与 clusterIP 相同的Endpoint。
  #LoadBalancer: NodePort 上并创建一个外部负载均衡器
  #ExternalName: 将此服务别名为指定的 externalName。
  type: NodePort
  #服务的 IP 地址,通常是随机分配的。 如果一个地址是手动指定的.
  #type:ExternalName（要求此字段为空）
  clusterIP: None
  #此服务公开的端口列表
  ports:
      #此服务将公开的端口。
    - port: 80
      #此端口的 IP 协议。 支持“TCP”、“UDP”和“SCTP”。 默认为 TCP
      protocol: TCP
      #要在服务所针对的 pod 上访问的端口的编号或名称。 号码必须在 1 到 65535 的范围内。名称必须是 IANA SVC NAME
      targetPort: 80
      #服务中此端口的名称。 这必须是 DNS_LABEL。 ServiceSpec 中的所有端口都必须具有唯一的名称。
      #在考虑服务的Endpoint时，这必须与 EndpointPort 中的“名称”字段匹配。 如果仅在此服务上定义了一个 ServicePort，则可选。
      name: a
      #当 type 为 NodePort 或 LoadBalancer 时，此服务在其上公开的每个节点上的端口
      nodePort: 80
  #用于维护会话亲缘关系。 启用基于客户端 IP 的会话亲缘关系。
  #ClientIP: 确保每次都将来自特定客户端的连接传递到同一个 Pod
  #None(默认)
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      #指定ClientIP 类型会话粘滞时间的秒数(当sessionAffinity：ClientIP)
      timeoutSeconds: 10800

